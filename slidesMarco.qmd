---
title: "slides_marco"
author: "Marco Kaeferbeck"
format: revealjs
editor: visual
---

## Causal Inference Using Double Machine Learning

Objective: Estimate the causal effect of Tumor_Size on Survival_Rate.

Challenge: Many variables (e.g., Age, Gender, Histology) influence both Tumor_Size and Survival_Rate.

### Why Traditional Regression Falls Short

Assumes linear, additive effects

Struggles with nonlinear interactions and high-dimensional data

Risk of:

Omitted variable bias

Overfitting

Misleading effect sizes

We need a flexible, robust method to isolate the causal effect.

## What is Double Machine Learning?

DML is a modern causal inference approach that:

- Uses machine learning to model confounding factors

- Removes predictive parts of Treatment and Outcome

- Estimates causal effects on the orthogonalized residuals

DML = Flexibility of ML + Rigor of causal inference

## DML in Three Steps

1. Model treatment (`Tumor_Size`) using confounders (e.g., Age, Gender)  
2. Model outcome (`Survival_Rate`) using same confounders  
3. Estimate causal effect using residuals from Step 1 & 2  

This "double residualization" removes biases from ML overfitting by orthogonalizing the treatment and outcome residuals.

The model assumes the following structure:

\[
Y \coloneqq X\theta + g(Z) + \epsilon, \quad \mathbb{E}[\epsilon \mid X, Z] = 0 \\
X \coloneqq m(Z) + \nu, \quad \mathbb{E}[\nu \mid Z] = 0
\]

Where:
- \( Y \): Outcome (`Survival_Rate`)
- \( X \): Treatment (`Tumor_Size`)
- \( Z \): Confounders (e.g., Age, Gender)
- \( g(Z), m(Z) \): Nuisance functions learned with machine learning
- \( \theta \): Causal effect of interest

## Bullets


## DAG explanation

| Variable | Role | Explanation |
|----------------|----------------|-----------------------------------------|
| Patient_ID | Irrelevant | Unique identifier; no causal meaning. |
| Age | Confounder | Affects both tumor development and survival independently. |
| Gender | Confounder | Influences tumor biology and survival differences. |
| Tumor_Type | Mediator / Modifier | Affects tumor size and survival; downstream of genetic/biological causes. |
| Tumor_Size | Treatment | Exposure variable of interest. |
| Location | Confounder | Tumor location can affect growth and survival likelihood. |
| Histology | Confounder | Tumor cell type influences growth and prognosis. |
| Stage | Collider / Mediator | Influenced by size/symptoms; affects survival. |
| Symptom_1 / 2 / 3 | Collider / Proxy | Caused by tumor size; influences detection/treatment. |
| Radiation_Treatment | Mediator / Collider | Determined by size/stage; affects survival. |
| Surgery_Performed | Mediator / Collider | On the causal path; may also be affected by other factors. |
| Chemotherapy | Mediator / Collider | Same as above. |
| Survival_Rate | Outcome | Target variable. |
| Tumor_Growth_Rate | Mediator | Upstream of size; more aggressive tumors grow faster and affect survival. |
| Family_History | Confounder | Genetic risk; influences tumor characteristics and survival risk. |
| MRI_Result | Collider | Influenced by tumor/symptoms; affects treatment; don't adjust. |
| Follow_Up_Required | Collider | Based on tumor/treatment; conditioning may introduce bias. |


## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
df <- read_csv("brain_tumor_dataset.csv")
summary(df)
str(df)

df <- df %>%
  mutate(across(where(is.character), as.factor))

# Create list of unique symptoms
symptoms_list <- c("Headache", "Nausea", "Seizures", "Vision Issues")

# Initialize new binary columns with 0
for (symptom in symptoms_list) {
  df[[symptom]] <- 0
}

# Loop through Symptom_1 to Symptom_3 and update binary indicators
for (i in 1:3) {
  col_name <- paste0("Symptom_", i)
  for (symptom in symptoms_list) {
    df[[symptom]] <- df[[symptom]] | (df[[col_name]] == symptom)
  }
}

# Convert logicals to numeric (0/1)
df[symptoms_list] <- lapply(df[symptoms_list], as.integer)

# Drop the original Symptom_1 to Symptom_3 columns
df <- df[ , !(names(df) %in% c("Symptom_1", "Symptom_2", "Symptom_3"))]


str(df)
```

```{r}
library(mlr3verse)
library(DoubleML)

library(data.table)

df_dt <- as.data.table(df)

# Then create the DoubleMLData object
dml_data <- DoubleMLData$new(
  df_dt,
  y_col = "Survival_Rate",
  d_cols = "Tumor_Size",
  x_cols = c("Age","Gender","Location","Histology","Family_History")
)



# Learner for outcome and treatment model
ml_g <- lrn("regr.ranger")  # for outcome model
ml_m <- lrn("regr.ranger")  # for treatment model

# Initialize the DoubleMLPLR (Partially Linear Regression) model
dml_plr <- DoubleMLPLR$new(data = dml_data,
                           ml_g = ml_g,
                           ml_m = ml_m,
                           n_folds = 5)

# Fit the model
dml_plr$fit()

# Print summary
print(dml_plr$summary())
```


